{"version":3,"sources":["controllers/project.js"],"names":["ctx","next","data","bearerToken","token","options","url","resolve","api_address","headers","Authorization","Accept","accept","response","request","getAsync","error","listWithData","statusCode","body","JSON","parse","redirect","list","detail","name_autofocus","createWithData","create","json","contentType","postAsync","_id","errors","length","field","name_error","message","createRequest","createPatch","createPatchRequest","setInfo","setInfoRequest","setMembers","addMemberRequest","debug","name","promisifyAll","html","join","__dirname"],"mappings":"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","file":"controllers/project.js","sourcesContent":["/**\n * Created by Bell on 16/8/29.\n */\n\nimport template from 'art-template';\nimport path from 'path';\nimport url from 'url';\nimport Request from 'request';\nimport bluebird from 'bluebird';\n\nimport config from '../config';\nimport * as token from '../utils/token';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nconst request = bluebird.promisifyAll(Request);\n\nexport async function list(ctx, next) {\n    let data = {};\n    const bearerToken = token.bearerToken(ctx);\n    const options = {\n        url: url.resolve(config.api_address, '/projects/my'),\n        headers: {\n            Authorization: bearerToken,\n            Accept: config.accept\n        }\n    };\n    let response = null;\n    try {\n        response = await request.getAsync(options);\n    } catch (err) {\n        data.error = 'List projects failed';\n        listWithData(ctx, data);\n        return;\n    }\n\n    const statusCode = response.statusCode;\n    const body = response.body;\n    if (statusCode == 200) {\n        listWithData(ctx, JSON.parse(body));\n    } else if (statusCode == 401) {\n        ctx.redirect('/login');\n    } else {\n        data.error = 'List projects failed';\n        listWithData(ctx, data);\n    }\n}\n\nexport async function detail(ctx, next) {\n\n}\n\nexport async function create(ctx, next) {\n    const data = {\n        name_autofocus: 'autofocus'\n    };\n    createWithData(ctx, data);\n}\n\nexport async function createRequest(ctx, next) {\n    const bearerToken = token.bearerToken(ctx);\n\n    let data = ctx.request.body;\n    const options = {\n        url: url.resolve(config.api_address, '/projects'),\n        json: true,\n        headers: {\n            contentType: 'application/json',\n            Authorization: bearerToken,\n            Accept: config.accept\n        },\n        body: data\n    };\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Create project failed';\n        createWithData(ctx, data);\n        return;\n    }\n\n    const statusCode = response.statusCode;\n    const body = response.body;\n    if (statusCode == 200 || statusCode == 201) {\n        ctx.redirect('/projects/' + body._id);\n    } else if (statusCode == 401) {\n        ctx.redirect('/login');\n    } else {\n        if (statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'name') {\n                    data.name_autofocus = 'autofocus';\n                    data.name_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Create project failed';\n        }\n        createWithData(ctx, data);\n    }\n}\n\nexport async function createPatch(ctx, next) {\n\n}\n\nexport async function createPatchRequest(ctx, next) {\n\n}\n\nexport async function setInfo(ctx, next) {\n\n}\n\nexport async function setInfoRequest(ctx, next) {\n\n}\n\nexport async function setMembers(ctx, next) {\n\n}\n\nexport async function addMemberRequest(ctx, next) {\n\n}\n\nfunction listWithData(ctx, data) {\n    let html = template(path.join(__dirname, '../views/project/list'), data);\n    ctx.body = html;\n}\n\nfunction createWithData(ctx, data) {\n    let html = template(path.join(__dirname, '../views/project/new'), data);\n    ctx.body = html;\n}\n\nfunction createWithData(ctx, data) {\n    let html = template(path.join(__dirname, '../views/project/new'), data);\n    ctx.body = html;\n}\n"],"sourceRoot":"/source/"}