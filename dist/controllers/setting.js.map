{"version":3,"sources":["controllers/setting.js"],"names":["ctx","next","data","bearerToken","token","options","url","resolve","api_address","headers","Authorization","Accept","accept","response","request","getAsync","error","settingProfileWithData","statusCode","body","content","JSON","parse","redirect","message","profile","password_autofocus","settingAccountWithData","account","request_body","new_password","confirm_password","confirm_password_error","confirm_password_autofocus","contentType","content_type","json","postAsync","debug","cookie","setToken","setUserRole","user","role","setUserEmail","email","errors","length","field","password_error","new_password_error","new_password_autofocus","modifyPassword","renderTokensWithData","tokens","renderGenerateTokenWithData","generateToken","renderGeneratedTokenWithData","name_error","name_autofocus","generateTokenRequest","id","params","renderTokenDetailWithData","tokenDetail","token_id","tokenDetailRequest","main_menu","render_data","mainMenuData","html","join","__dirname","node_env","process","env","NODE_ENV","name","promisifyAll"],"mappings":"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","file":"controllers/setting.js","sourcesContent":["/**\n * Created by Bell on 16/9/7.\n */\n\nimport template from 'art-template';\nimport path from 'path';\nimport url from 'url';\nimport Request from 'request';\nimport bluebird from 'bluebird';\n\nimport config from '../config';\nimport * as cookie from '../utils/cookie';\nimport * as token from '../utils/token';\n\nimport * as render_data from '../tools/data';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nconst request = bluebird.promisifyAll(Request);\n\nexport async function profile(ctx, next) {\n    let data = {};\n    const bearerToken = token.bearerToken(ctx);\n\n    // user profile\n    {\n        const options = {\n            url: url.resolve(config.api_address, '/users/me/profile'),\n            headers: {\n                Authorization: bearerToken,\n                Accept: config.accept\n            }\n        };\n        let response = null;\n        try {\n            response = await request.getAsync(options);\n        } catch (err) {\n            data.error = 'Get my profile failed';\n            settingProfileWithData(ctx, data);\n            return;\n        }\n\n        const statusCode = response.statusCode;\n        const body = response.body;\n        if (statusCode === 200) {\n            data.content = JSON.parse(body);\n        } else if (statusCode === 401) {\n            ctx.redirect('/login');\n            return;\n        } else if (statusCode === 422) {\n            data.error = body.message;\n            settingProfileWithData(ctx, data);\n            return;\n        } else {\n            data.error = 'Get my profile failed';\n            settingProfileWithData(ctx, data);\n            return;\n        }\n    }\n    settingProfileWithData(ctx, data);\n}\n\nexport async function account(ctx, next) {\n    let data = {\n        password_autofocus: 'autofocus'\n    };\n    settingAccountWithData(ctx, data);\n}\n\nexport async function modifyPassword(ctx, next) {\n    const bearerToken = token.bearerToken(ctx);\n    const request_body = ctx.request.body;\n    let data = request_body;\n\n    if (request_body.new_password !== request_body.confirm_password) {\n        data.confirm_password_error = 'Confirm new password failed';\n        data.confirm_password_autofocus = 'autofocus';\n        settingAccountWithData(ctx, data);\n        return;\n    }\n\n    // modify my password\n    {\n        const options = {\n            url: url.resolve(config.api_address, '/users/me/modify-password'),\n            headers: {\n                Authorization: bearerToken,\n                contentType: config.content_type,\n                Accept: config.accept\n            },\n            json: true,\n            body: request_body\n        };\n        let response = null;\n        try {\n            response = await request.postAsync(options);\n        } catch (err) {\n            data.error = 'Modify password failed';\n            settingAccountWithData(ctx, data);\n            return;\n        }\n\n        const statusCode = response.statusCode;\n        const body = response.body;\n        debug(body);\n        if (statusCode === 200) {\n            cookie.setToken(ctx, body.token);\n            cookie.setUserRole(ctx, body.user.role);\n            cookie.setUserEmail(ctx, body.user.email);\n            ctx.redirect('/');\n        } else if (statusCode === 401) {\n            ctx.redirect('/login');\n            return;\n        } else if (statusCode === 422) {\n            if (body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'password') {\n                    data.password_error = body.message;\n                    data.password_autofocus = 'autofocus';\n                } else if (error.field == 'new_password') {\n                    data.new_password_error = body.message;\n                    data.new_password_autofocus = 'autofocus';\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n            settingAccountWithData(ctx, data);\n            return;\n        } else {\n            data.error = 'Modify password failed';\n            settingAccountWithData(ctx, data);\n            return;\n        }\n    }\n    settingAccountWithData(ctx, data);\n}\n\nexport async function tokens(ctx, next) {\n    const bearerToken = token.bearerToken(ctx);\n    let data = {};\n\n    // get tokens\n    {\n        const options = {\n            url: url.resolve(config.api_address, '/tokens'),\n            headers: {\n                Authorization: bearerToken,\n                Accept: config.accept\n            }\n        };\n        let response = null;\n        try {\n            response = await request.getAsync(options);\n        } catch (err) {\n            data.error = 'Get tokens failed';\n            renderTokensWithData(ctx, data);\n            return;\n        }\n\n        const statusCode = response.statusCode;\n        const body = response.body;\n        debug(body);\n        if (statusCode === 200) {\n            data.tokens = JSON.parse(body);\n        } else if (statusCode === 401) {\n            ctx.redirect('/login');\n            return;\n        } else if (statusCode === 422) {\n            data.error = body.message;\n            renderTokensWithData(ctx, data);\n            return;\n        } else {\n            data.error = 'Get tokens failed';\n            renderTokensWithData(ctx, data);\n            return;\n        }\n    }\n    renderTokensWithData(ctx, data);\n}\n\nexport async function generateToken(ctx, next) {\n    let data = {\n        password_autofocus: 'autofocus'\n    };\n    renderGenerateTokenWithData(ctx, data)\n}\n\nexport async function generateTokenRequest(ctx, next) {\n    const bearerToken = token.bearerToken(ctx);\n    const request_body = ctx.request.body;\n    let data = request_body;\n\n    // generate token\n    {\n        const options = {\n            url: url.resolve(config.api_address, '/tokens'),\n            headers: {\n                Authorization: bearerToken,\n                contentType: config.content_type,\n                Accept: config.accept\n            },\n            json: true,\n            body: request_body\n        };\n        let response = null;\n        try {\n            response = await request.postAsync(options);\n        } catch (err) {\n            data.error = 'Generate new token failed';\n            renderGeneratedTokenWithData(ctx, data);\n            return;\n        }\n\n        const statusCode = response.statusCode;\n        const body = response.body;\n        debug(body);\n        if (statusCode >= 200 && statusCode < 300) {\n            renderGeneratedTokenWithData(ctx, body);\n        } else if (statusCode === 401) {\n            ctx.redirect('/login');\n        } else if (statusCode === 422) {\n            if (body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'password') {\n                    data.password_error = body.message;\n                    data.password_autofocus = 'autofocus';\n                } else if (error.field == 'name') {\n                    data.name_error = body.message;\n                    data.name_autofocus = 'autofocus';\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n            renderGenerateTokenWithData(ctx, data);\n        } else {\n            data.error = 'Modify password failed';\n            renderGenerateTokenWithData(ctx, data);\n        }\n    }\n}\n\nexport async function tokenDetail(ctx, next) {\n    let data = {\n        id: ctx.params.id,\n        password_autofocus: 'autofocus'\n    };\n    renderTokenDetailWithData(ctx, data);\n}\n\nexport async function tokenDetailRequest(ctx, next) {\n    const bearerToken = token.bearerToken(ctx);\n    const request_body = ctx.request.body;\n    debug(request_body);\n    const token_id = ctx.params.id;\n    let data = request_body;\n    data.id = token_id;\n\n    // get token detail\n    {\n        const options = {\n            url: url.resolve(config.api_address, '/tokens/' + token_id),\n            headers: {\n                Authorization: bearerToken,\n                contentType: config.content_type,\n                Accept: config.accept\n            },\n            json: true,\n            body: request_body\n        };\n        let response = null;\n        try {\n            response = await request.postAsync(options);\n        } catch (err) {\n            data.error = 'Get token detail failed';\n            renderTokenDetailWithData(ctx, data);\n            return;\n        }\n\n        const statusCode = response.statusCode;\n        const body = response.body;\n        debug(body);\n        if (statusCode >= 200 && statusCode < 300) {\n            data.token = body;\n            renderTokenDetailWithData(ctx, data);\n        } else if (statusCode === 401) {\n            ctx.redirect('/login');\n        } else if (statusCode === 422) {\n            if (body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'password') {\n                    data.password_error = body.message;\n                    data.password_autofocus = 'autofocus';\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n            renderTokenDetailWithData(ctx, data);\n        } else {\n            data.error = 'Get token detail failed';\n            renderTokenDetailWithData(ctx, data);\n        }\n    }\n}\n\n// render\n\nasync function settingProfileWithData(ctx, data) {\n    // main menu\n    data.main_menu = render_data.mainMenuData(ctx);\n\n    debug(data);\n    let html = template(path.join(__dirname, '../views/setting/profile'), data);\n    ctx.body = html;\n}\n\nasync function settingAccountWithData(ctx, data) {\n    // main menu\n    data.main_menu = render_data.mainMenuData(ctx);\n\n    debug(data);\n    let html = template(path.join(__dirname, '../views/setting/account'), data);\n    ctx.body = html;\n}\n\nasync function renderTokensWithData(ctx, data) {\n    // main menu\n    data.main_menu = render_data.mainMenuData(ctx);\n\n    // config js\n    data.node_env = process.env.NODE_ENV || 'default';\n\n    debug(data);\n    let html = template(path.join(__dirname, '../views/setting/tokens'), data);\n    ctx.body = html;\n}\n\nasync function renderGenerateTokenWithData(ctx, data) {\n    // main menu\n    data.main_menu = render_data.mainMenuData(ctx);\n\n    debug(data);\n    let html = template(path.join(__dirname, '../views/setting/token-generate'), data);\n    ctx.body = html;\n}\n\nasync function renderGeneratedTokenWithData(ctx, data) {\n    // main menu\n    data.main_menu = render_data.mainMenuData(ctx);\n\n    // config js\n    data.node_env = process.env.NODE_ENV || 'default';\n\n    debug(data);\n    let html = template(path.join(__dirname, '../views/setting/token-generated'), data);\n    ctx.body = html;\n}\n\nasync function renderTokenDetailWithData(ctx, data) {\n    // main menu\n    data.main_menu = render_data.mainMenuData(ctx);\n\n    debug(data);\n    let html = template(path.join(__dirname, '../views/setting/token-detail'), data);\n    ctx.body = html;\n}\n"],"sourceRoot":"/source/"}