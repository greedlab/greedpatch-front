{"version":3,"sources":["controllers/user.js"],"names":["ctx","next","debug","data","title","loginWithData","login","request","body","options","url","resolve","api_address","json","postAsync","response","statusCode","token","saveToken","redirect","error","message","errors","length","field","email_autofocus","email_error","password_autofocus","password_error","loginRequest","registerWithData","register","registerRequest","resetPasswordWithData","resetPassword","success","resetPasswordRequest","loginWithMessage","setMyPassword","setMyPasswordRequest","theToken","getToken","bearerToken","headers","Authorization","clearToken","logoutRequest","string","name","promisifyAll","html","join","__dirname","setMyPasswordWithData"],"mappings":"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","file":"controllers/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/16.\n */\n\nimport template from 'art-template';\nimport path from 'path';\nimport url from 'url';\nimport Request from 'request';\nimport bluebird from 'bluebird';\n\nimport config from '../config';\nimport * as token from '../utils/token';\nimport * as string from '../utils/string';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nconst request = bluebird.promisifyAll(Request);\n\nexport async function login(ctx, next) {\n    debug(ctx);\n    const data = {\n        title: 'Login'\n    };\n    loginWithData(ctx, data);\n}\n\nexport async function loginRequest(ctx, next) {\n    let data = ctx.request.body;\n    debug(data);\n    const options = {\n        url: url.resolve(config.api_address, '/login'),\n        json: true,\n        body: data\n    };\n    const response = await request.postAsync(options);\n    debug(response.statusCode);\n    debug(response.body);\n\n    const statusCode = response.statusCode;\n    const body = response.body;\n    if (statusCode == 200) {\n        token.saveToken(ctx, body.token);\n        ctx.redirect('/');\n    } else {\n        if (statusCode == 401) {\n            data.error = body.message;\n        } else if (statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'email') {\n                    data.email_autofocus = 'autofocus';\n                    data.email_error = body.message;\n                } else if (error.field == 'password') {\n                    data.password_autofocus = 'autofocus';\n                    data.password_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Login failed';\n        }\n        loginWithData(ctx, data);\n    }\n}\n\nexport async function register(ctx, next) {\n    const data = {\n        email_autofocus: 'autofocus'\n    };\n    registerWithData(ctx, data);\n}\n\nexport async function registerRequest(ctx, next) {\n    let data = ctx.request.body;\n    debug(data);\n    const options = {\n        url: url.resolve(config.api_address, '/register'),\n        json: true,\n        body: data\n    };\n\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Register failed';\n        registerWithData(ctx, data);\n        return;\n    }\n    const body = response.body;\n    if (response.statusCode == 200) {\n        token.saveToken(ctx, response.body.token);\n        ctx.redirect('/');\n    } else {\n        if (response.statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'email') {\n                    data.email_autofocus = 'autofocus';\n                    data.email_error = body.message;\n                } else if (error.field == 'password') {\n                    data.password_autofocus = 'autofocus';\n                    data.password_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Register failed';\n        }\n        registerWithData(ctx, data);\n    }\n}\n\nexport async function resetPassword(ctx, next) {\n    const data = {\n        email_autofocus: 'autofocus'\n    };\n    resetPasswordWithData(ctx, data);\n}\n\nexport async function resetPasswordRequest(ctx, next) {\n    let data = ctx.request.body;\n    debug(data);\n    const options = {\n        url: url.resolve(config.api_address, '/reset-password'),\n        json: true,\n        body: data\n    };\n\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Reset password failed';\n        resetPasswordWithData(ctx, data);\n        return;\n    }\n    const body = response.body;\n    if (response.statusCode == 200) {\n        data.success = body.message;\n        resetPasswordWithData(ctx, data);\n    } else {\n        if (response.statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'email') {\n                    data.email_autofocus = 'autofocus';\n                    data.email_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Reset password failed';\n        }\n        registerWithData(ctx, data);\n    }\n}\n\nexport async function setMyPassword(ctx, next) {\n    loginWithMessage(ctx, next, null);\n}\n\nexport async function setMyPasswordRequest(ctx, next) {\n    loginWithMessage(ctx, next, null);\n}\n\nexport async function logoutRequest(ctx, next) {\n    const theToken = token.getToken(ctx);\n    if (theToken && theToken.length > 0) {\n        const bearerToken = token.bearerToken(theToken);\n        const options = {\n            url: url.resolve(config.api_address, '/logout'),\n            headers: {\n                Authorization: bearerToken\n            }\n        };\n        const response = await request.postAsync(options);\n        debug(response.statusCode);\n        debug(response.body);\n    }\n    ctx.redirect('/');\n    token.clearToken(ctx);\n}\n\nfunction loginWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/login'), data);\n    ctx.body = html;\n}\n\nfunction registerWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/register'), data);\n    ctx.body = html;\n}\n\nfunction resetPasswordWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/reset-password'), data);\n    ctx.body = html;\n}\n\nfunction setMyPasswordWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/set-password'), data);\n    ctx.body = html;\n}\n"],"sourceRoot":"/source/"}