{"version":3,"sources":["controllers/user.js"],"names":["ctx","next","loginWithMessage","login","debug","request","body","username","length","password","options","url","resolve","apiDomain","json","postAsync","response","statusCode","token","saveToken","redirect","loginRequest","theToken","getToken","bearerToken","headers","Authorization","clearToken","logout","registerWithMessage","register","string","validUsername","validPassword","confirmPassword","registerRequest","name","promisifyAll","message","data","title","error","html","join","__dirname"],"mappings":"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","file":"controllers/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/16.\n */\n\nimport template from 'art-template';\nimport path from 'path';\nimport url from 'url';\nimport Request from 'request';\nimport bluebird from 'bluebird';\n\nimport * as token from '../utils/token';\nimport * as string from '../utils/string';\nimport config from '../config';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nconst request = bluebird.promisifyAll(Request);\n\nexport async function login(ctx, next) {\n    loginWithMessage(ctx,next,null);\n}\n\nexport async function loginRequest(ctx, next) {\n    debug(ctx.request.body);\n    const username = ctx.request.body.username;\n    if (!username || username.length == 0) {\n        loginWithMessage(ctx,next,'username is empty');\n        return;\n    }\n    const password = ctx.request.body.password;\n    if (!password || password.length == 0) {\n        loginWithMessage(ctx,next,'password is empty');\n        return;\n    }\n\n    const options = {\n        url: url.resolve(config.apiDomain, '/user/login'),\n        json: true,\n        body: {\n            username: username,\n            password: password\n        }\n    };\n    const response = await request.postAsync(options);\n    debug(response.statusCode);\n    debug(response.body);\n    if (response.statusCode == 200) {\n        token.saveToken(ctx,response.body.token);\n        ctx.redirect('/');\n    } else {\n        loginWithMessage(ctx,next,response.body || 'unvalid username or password');\n    }\n}\n\nfunction loginWithMessage(ctx, next, message) {\n    let data = {\n        title: 'Login',\n        error: message\n    };\n    var html = template(path.join(__dirname,'../views/user/login'), data);\n    ctx.body = html;\n}\n\nexport async function logout(ctx, next) {\n    const theToken = token.getToken(ctx);\n    if (theToken && theToken.length > 0) {\n        const bearerToken = token.bearerToken(theToken);\n        const options = {\n            url: url.resolve(config.apiDomain, '/user/logout'),\n            headers: {\n                Authorization: bearerToken\n            }\n        };\n        const response = await request.postAsync(options);\n        debug(response.statusCode);\n        debug(response.body);\n    }\n    ctx.redirect('/');\n    token.clearToken(ctx);\n}\n\nexport async function register(ctx, next) {\n    registerWithMessage(ctx,next,null);\n}\n\nexport async function registerRequest(ctx, next) {\n    debug(ctx.request.body);\n    const username = ctx.request.body.username;\n    if (!string.validUsername(username)) {\n        registerWithMessage(ctx,next,'unvalid username');\n        return;\n    }\n    const password = ctx.request.body.password;\n    if (!string.validPassword(password)) {\n        registerWithMessage(ctx,next,'unvalid password');\n        return;\n    }\n    const confirmPassword = ctx.request.body.confirmPassword;\n    if (password != confirmPassword) {\n        registerWithMessage(ctx,next,'unvalid password');\n        return;\n    }\n    const options = {\n        url: url.resolve(config.apiDomain, '/user/register'),\n        json: true,\n        body: {\n            username: username,\n            password: password\n        }\n    };\n    const response = await request.postAsync(options);\n    debug(response.statusCode);\n    debug(response.body);\n    if (response.statusCode == 200) {\n        token.saveToken(ctx,response.body.token);\n        ctx.redirect('/');\n    } else {\n        registerWithMessage(ctx,next,response.body || 'register failed');\n    }\n}\n\nfunction registerWithMessage(ctx, next, message) {\n    let data = {\n        title: 'Register',\n        error: message\n    };\n    var html = template(path.join(__dirname,'../views/user/register'), data);\n    ctx.body = html;\n}\n"],"sourceRoot":"/source/"}