{"version":3,"sources":["controllers/user.js"],"names":["ctx","next","data","email_autofocus","loginWithData","login","request","body","options","url","resolve","api_address","json","response","postAsync","error","statusCode","token","saveToken","redirect","message","errors","length","field","email_error","password_autofocus","password_error","loginRequest","registerWithData","register","password","confirm_password","confirm_password_error","confirm_password_autofocus","registerRequest","resetPasswordWithData","resetPassword","success","resetPasswordRequest","params","setPasswordWithData","setPassword","setPasswordRequest","theToken","getToken","bearerToken","headers","Authorization","clearToken","logoutRequest","debug","name","promisifyAll","html","join","__dirname"],"mappings":"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","file":"controllers/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/16.\n */\n\nimport template from 'art-template';\nimport path from 'path';\nimport url from 'url';\nimport Request from 'request';\nimport bluebird from 'bluebird';\n\nimport config from '../config';\nimport * as token from '../utils/token';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nconst request = bluebird.promisifyAll(Request);\n\nexport async function login(ctx, next) {\n    const data = {\n        email_autofocus: 'autofocus'\n    };\n    loginWithData(ctx, data);\n}\n\nexport async function loginRequest(ctx, next) {\n    let data = ctx.request.body;\n    const options = {\n        url: url.resolve(config.api_address, '/login'),\n        json: true,\n        body: data\n    };\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Login failed';\n        loginWithData(ctx, data);\n        return;\n    }\n\n    const statusCode = response.statusCode;\n    const body = response.body;\n    if (statusCode == 200) {\n        token.saveToken(ctx, body.token);\n        ctx.redirect('/');\n    } else {\n        if (statusCode == 401) {\n            data.error = body.message;\n        } else if (statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'email') {\n                    data.email_autofocus = 'autofocus';\n                    data.email_error = body.message;\n                } else if (error.field == 'password') {\n                    data.password_autofocus = 'autofocus';\n                    data.password_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Login failed';\n        }\n        loginWithData(ctx, data);\n    }\n}\n\nexport async function register(ctx, next) {\n    const data = {\n        email_autofocus: 'autofocus'\n    };\n    registerWithData(ctx, data);\n}\n\nexport async function registerRequest(ctx, next) {\n    let data = ctx.request.body;\n    if (data.password && data.password != data.confirm_password) {\n        data.confirm_password_error = 'Please input same password';\n        data.confirm_password_autofocus = 'autofocus';\n        registerWithData(ctx, data);\n        return;\n    }\n\n    const options = {\n        url: url.resolve(config.api_address, '/register'),\n        json: true,\n        body: data\n    };\n\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Register failed';\n        registerWithData(ctx, data);\n        return;\n    }\n    const body = response.body;\n    if (response.statusCode == 200) {\n        token.saveToken(ctx, response.body.token);\n        ctx.redirect('/');\n    } else {\n        if (response.statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'email') {\n                    data.email_autofocus = 'autofocus';\n                    data.email_error = body.message;\n                } else if (error.field == 'password') {\n                    data.password_autofocus = 'autofocus';\n                    data.password_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Register failed';\n        }\n        registerWithData(ctx, data);\n    }\n}\n\nexport async function resetPassword(ctx, next) {\n    const data = {\n        email_autofocus: 'autofocus'\n    };\n    resetPasswordWithData(ctx, data);\n}\n\nexport async function resetPasswordRequest(ctx, next) {\n    let data = ctx.request.body;\n    const options = {\n        url: url.resolve(config.api_address, '/reset-password'),\n        json: true,\n        body: data\n    };\n\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Reset password failed';\n        resetPasswordWithData(ctx, data);\n        return;\n    }\n    const body = response.body;\n    if (response.statusCode == 200) {\n        data.success = body.message;\n        resetPasswordWithData(ctx, data);\n    } else {\n        if (response.statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'email') {\n                    data.email_autofocus = 'autofocus';\n                    data.email_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Reset password failed';\n        }\n        registerWithData(ctx, data);\n    }\n}\n\nexport async function setPassword(ctx, next) {\n    const data = {\n        token: ctx.params.token,\n        password_autofocus: 'autofocus'\n    };\n    setPasswordWithData(ctx, data);\n}\n\nexport async function setPasswordRequest(ctx, next) {\n    let data = ctx.request.body;\n    if (data.password && data.password != data.confirm_password) {\n        data.confirm_password_error = 'Please input same password';\n        data.confirm_password_autofocus = 'autofocus';\n        setPasswordWithData(ctx, data);\n        return;\n    }\n\n    data.token = ctx.params.token;\n    const options = {\n        url: url.resolve(config.api_address, '/set-password/'),\n        json: true,\n        body: data\n    };\n\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Set password failed';\n        setPasswordWithData(ctx, data);\n        return;\n    }\n    const body = response.body;\n    if (response.statusCode == 200) {\n        token.saveToken(ctx, body.token);\n        ctx.redirect('/');\n    } else {\n        if (response.statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'password') {\n                    data.password_autofocus = 'autofocus';\n                    data.password_error = body.message;\n                } else if (error.field == 'confirm_password') {\n                    data.confirm_password_autofocus = 'autofocus';\n                    data.confirm_password_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Set password failed';\n        }\n        setPasswordWithData(ctx, data);\n    }\n}\n\nexport async function logoutRequest(ctx, next) {\n    const theToken = token.getToken(ctx);\n    if (theToken && theToken.length > 0) {\n        const bearerToken = token.bearerToken(theToken);\n        const options = {\n            url: url.resolve(config.api_address, '/logout'),\n            headers: {\n                Authorization: bearerToken\n            }\n        };\n        const response = await request.postAsync(options);\n    }\n    ctx.redirect('/');\n    token.clearToken(ctx);\n}\n\nfunction loginWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/login'), data);\n    ctx.body = html;\n}\n\nfunction registerWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/register'), data);\n    ctx.body = html;\n}\n\nfunction resetPasswordWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/reset-password'), data);\n    ctx.body = html;\n}\n\nfunction setPasswordWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/set-password'), data);\n    ctx.body = html;\n}\n"],"sourceRoot":"/source/"}