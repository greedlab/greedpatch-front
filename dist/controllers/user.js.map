{"version":3,"sources":["controllers/user.js"],"names":["ctx","next","data","email_autofocus","loginWithData","login","request","body","options","url","resolve","api_address","json","response","postAsync","error","statusCode","cookie","setToken","token","setUserRole","user","role","setUserEmail","email","redirect","message","errors","length","field","email_error","password_autofocus","password_error","loginRequest","registerWithData","register","password","confirm_password","confirm_password_error","confirm_password_autofocus","registerRequest","resetPasswordWithData","resetPassword","success","resetPasswordRequest","params","setPasswordWithData","setPassword","setPasswordRequest","theToken","getToken","bearerToken","bearerTokenFromToken","headers","Authorization","clear","logoutRequest","debug","name","promisifyAll","html","join","__dirname"],"mappings":"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","file":"controllers/user.js","sourcesContent":["/**\n * Created by Bell on 16/8/16.\n */\n\nimport template from 'art-template';\nimport path from 'path';\nimport url from 'url';\nimport Request from 'request';\nimport bluebird from 'bluebird';\n\nimport config from '../config';\nimport * as token from '../tools/token';\nimport * as cookie from '../tools/cookie';\n\nimport Debug from 'debug';\nimport pkg from '../../package.json';\nconst debug = new Debug(pkg.name);\n\nconst request = bluebird.promisifyAll(Request);\n\nexport async function login(ctx, next) {\n    const data = {\n        email_autofocus: 'autofocus'\n    };\n    loginWithData(ctx, data);\n}\n\nexport async function loginRequest(ctx, next) {\n    let data = ctx.request.body;\n    const options = {\n        url: url.resolve(config.api_address, '/login'),\n        json: true,\n        body: data\n    };\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Login failed';\n        loginWithData(ctx, data);\n        return;\n    }\n\n    const statusCode = response.statusCode;\n    const body = response.body;\n    if (statusCode == 200) {\n        cookie.setToken(ctx, body.token);\n        cookie.setUserRole(ctx, body.user.role);\n        cookie.setUserEmail(ctx, body.user.email);\n        ctx.redirect('/');\n    } else {\n        if (statusCode == 401) {\n            data.error = body.message;\n        } else if (statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'email') {\n                    data.email_autofocus = 'autofocus';\n                    data.email_error = body.message;\n                } else if (error.field == 'password') {\n                    data.password_autofocus = 'autofocus';\n                    data.password_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Login failed';\n        }\n        loginWithData(ctx, data);\n    }\n}\n\nexport async function register(ctx, next) {\n    const data = {\n        email_autofocus: 'autofocus'\n    };\n    registerWithData(ctx, data);\n}\n\nexport async function registerRequest(ctx, next) {\n    let data = ctx.request.body;\n    if (data.password && data.password != data.confirm_password) {\n        data.confirm_password_error = 'Please input same password';\n        data.confirm_password_autofocus = 'autofocus';\n        registerWithData(ctx, data);\n        return;\n    }\n\n    const options = {\n        url: url.resolve(config.api_address, '/register'),\n        json: true,\n        body: data\n    };\n\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Register failed';\n        registerWithData(ctx, data);\n        return;\n    }\n    const body = response.body;\n    if (response.statusCode == 200) {\n        cookie.setToken(ctx, response.body.token);\n        cookie.setUserRole(ctx, body.user.role);\n        cookie.setUserEmail(ctx, body.user.email);\n        ctx.redirect('/');\n    } else {\n        if (response.statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'email') {\n                    data.email_autofocus = 'autofocus';\n                    data.email_error = body.message;\n                } else if (error.field == 'password') {\n                    data.password_autofocus = 'autofocus';\n                    data.password_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Register failed';\n        }\n        registerWithData(ctx, data);\n    }\n}\n\nexport async function resetPassword(ctx, next) {\n    const data = {\n        email_autofocus: 'autofocus'\n    };\n    resetPasswordWithData(ctx, data);\n}\n\nexport async function resetPasswordRequest(ctx, next) {\n    let data = ctx.request.body;\n    const options = {\n        url: url.resolve(config.api_address, '/reset-password'),\n        json: true,\n        body: data\n    };\n\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Reset password failed';\n        resetPasswordWithData(ctx, data);\n        return;\n    }\n    const body = response.body;\n    if (response.statusCode == 200) {\n        data.success = body.message;\n        resetPasswordWithData(ctx, data);\n    } else {\n        if (response.statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'email') {\n                    data.email_autofocus = 'autofocus';\n                    data.email_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Reset password failed';\n        }\n        registerWithData(ctx, data);\n    }\n}\n\nexport async function setPassword(ctx, next) {\n    const data = {\n        token: ctx.params.token,\n        password_autofocus: 'autofocus'\n    };\n    setPasswordWithData(ctx, data);\n}\n\nexport async function setPasswordRequest(ctx, next) {\n    let data = ctx.request.body;\n    if (data.password && data.password != data.confirm_password) {\n        data.confirm_password_error = 'Please input same password';\n        data.confirm_password_autofocus = 'autofocus';\n        setPasswordWithData(ctx, data);\n        return;\n    }\n\n    data.token = ctx.params.token;\n    const options = {\n        url: url.resolve(config.api_address, '/set-password/'),\n        json: true,\n        body: data\n    };\n\n    let response = null;\n    try {\n        response = await request.postAsync(options);\n    } catch (err) {\n        data.error = 'Set password failed';\n        setPasswordWithData(ctx, data);\n        return;\n    }\n    const body = response.body;\n    if (response.statusCode == 200) {\n        ctx.redirect('/login');\n    } else {\n        if (response.statusCode == 422) {\n            if (body && body.errors && body.errors.length > 0) {\n                const error = body.errors[0];\n                if (error.field == 'password') {\n                    data.password_autofocus = 'autofocus';\n                    data.password_error = body.message;\n                } else if (error.field == 'confirm_password') {\n                    data.confirm_password_autofocus = 'autofocus';\n                    data.confirm_password_error = body.message;\n                } else {\n                    data.error = body.message;\n                }\n            } else {\n                data.error = body.message;\n            }\n        } else {\n            data.error = 'Set password failed';\n        }\n        setPasswordWithData(ctx, data);\n    }\n}\n\nexport async function logoutRequest(ctx, next) {\n    const theToken = cookie.getToken(ctx);\n    if (theToken && theToken.length > 0) {\n        const bearerToken = token.bearerTokenFromToken(theToken);\n        const options = {\n            url: url.resolve(config.api_address, '/logout'),\n            headers: {\n                Authorization: bearerToken\n            }\n        };\n        const response = await request.postAsync(options);\n        cookie.clear(ctx);\n    }\n    ctx.redirect('/');\n}\n\nfunction loginWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/login'), data);\n    ctx.body = html;\n}\n\nfunction registerWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/register'), data);\n    ctx.body = html;\n}\n\nfunction resetPasswordWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/reset-password'), data);\n    ctx.body = html;\n}\n\nfunction setPasswordWithData(ctx, data) {\n    var html = template(path.join(__dirname, '../views/user/set-password'), data);\n    ctx.body = html;\n}\n"],"sourceRoot":"/source/"}