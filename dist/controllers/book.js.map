{"version":3,"sources":["controllers/book.js"],"names":["ctx","next","token","debug","logined","length","requestUrl","resolve","apiDomain","request","getAsync","response","body","data","JSON","parse","title","html","join","__dirname","list","querystring","options","url","detail","addWithMessage","add","name","price","theBearerToken","json","headers","contentType","Authorization","postAsync","statusCode","redirect","message","addRequest","error","promisifyAll"],"mappings":"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","file":"controllers/book.js","sourcesContent":["/**\n * Created by Bell on 16/8/16.\n */\n\nimport template from 'art-template';\nimport path from 'path';\nimport url from 'url';\nimport Request from 'request';\nimport bluebird from 'bluebird';\nimport { getToken, bearerToken } from '../utils/token';\nimport config from '../config';\nimport Debug from 'debug';\nimport pkg from '../../package.json';\n\nconst debug = new Debug(pkg.name);\nconst request = bluebird.promisifyAll(Request);\n\nexport async function list(ctx, next) {\n    const token = getToken(ctx);\n    debug('token: ', token);\n    const logined = token && token.length > 0;\n\n    const requestUrl = url.resolve(config.apiDomain, '/book/list');\n    debug(requestUrl);\n    const response = await request.getAsync(requestUrl);\n    debug(response.body);\n\n    let data = JSON.parse(response.body);\n    data.title = 'Books';\n    data.logined = logined;\n\n    var html = template(path.join(__dirname, '../views/book/list'), data);\n    ctx.body = html;\n}\n\nexport async function detail(ctx, next) {\n    debug(ctx.querystring);\n    const options = {\n        url: url.resolve(config.apiDomain, '/book/detail?' + ctx.querystring)\n    };\n    const response = await request.getAsync(options);\n    debug(response.body);\n    let data = JSON.parse(response.body);\n    data.title = 'Book Detail';\n    var html = template(path.join(__dirname, '../views/book/detail'), data);\n    ctx.body = html;\n}\n\nexport async function add(ctx, next) {\n    addWithMessage(ctx,next,null);\n}\n\nexport async function addRequest(ctx, next) {\n    debug(ctx.request.body);\n    const token = getToken(ctx);\n\n    const name = ctx.request.body.name;\n    if (!name || name.length == 0) {\n        addWithMessage(ctx,next,'name is empty');\n        return;\n    }\n    const price = ctx.request.body.price;\n    const theBearerToken = bearerToken(token);\n    const options = {\n        url: url.resolve(config.apiDomain, '/book/add/'),\n        json: true,\n        headers: {\n            contentType: 'application/json',\n            Authorization: theBearerToken\n        },\n        body: {\n            name: name,\n            price: price\n        }\n    };\n    const response = await request.postAsync(options);\n    if (response.statusCode == 200) {\n        ctx.redirect('/book/list');\n    } else {\n        addWithMessage(ctx,next,response.message || \"Add book failed\");\n    }\n}\n\nasync function addWithMessage(ctx, next,message) {\n    let data = {\n        title: 'Add Book',\n        error: message\n    };\n    var html = template(path.join(__dirname, '../views/book/add'), data);\n    ctx.body = html;\n}\n"],"sourceRoot":"/source/"}